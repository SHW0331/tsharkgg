# Python Flask 기반 PCAP 데이터 모니터링 대시보드 구축 계획서
1. 프로젝트 개요
- 목적
    - Python의 subprocess 모듈과 tshark 명령어를 사용하여 PCAP 데이터를 실시간으로 분석.
    - Flask 기반 웹 대시보드를 통해 데이터를 시각화하고 빠르고 간단한 분석 제공.
    - Wireshark의 차별화: 쉽고 직관적이며 핵심 정보에 초점.

- 기대효과
    - 실시간 네트워크 트래픽 분석 가능
    - 대시보드 상에서 주요 통계를 한눈에 확인
    - 일반 사용자도 이해하기 쉬운 UI 제공

2. 주요 기능
- 데이터 분석
    - tshark를 통해 실시간으로 PCAP 데이터를 추출
    - 추출 항목:
        - 패킷 개수
        - 프로토콜 분포 (TCP, UDP, HTTP, DNS)
        - 상위 발신/수신 IP 및 포트
        - 특정 키워드 또는 필터 조건 기반 패킷 검색

3. 실시간 대시보드
- 주요 섹션
    - 트래픽 개요
        - 총 패킷 수
        - 실시간 패킷 속도
    - 프로토콜 분포 그래프
        - 원형 차트 또는 막대그래프로 표시
        - 막대그래프로 표시
            - protocol 분포 그래프
            - 실시간 패킷 속도 그래프
            - 상위 발신/수신 IP 그래프
            - 상위 사용포트 량 그래프
            - 비정상 트래픽 탐지 그래프

    - IP 및 포트 통계
        - 가장 많이 사용된 IP 주소 및 포트 리스트.
    - 필터링 및 검색
        - 특정 프로토콜, IP, 포트, 또는 키워드 기반 실시간 검색
    - 위험 탐지
        - 비정상 트래픽(예: 포트 스캔, DoS 시도 등)알림.

4. 사용자 정의 기능
- 필터 추가
    - 특정 프로토콜, IP 주소, 포트를 기반으로 필터 설정
- 결과 다운로드
    - 분석 결과를 CSV 또는 JSON으로 저장.
- 알림 시스템
    - 특정 조건 만족 시 사용자에게 알림 제공 (예: 과도한 트래픽 발생)


## 차별화 포인트
1. 사용자 친화적 인터페이스
- 복잡한 메뉴 없이 대시보드에서 바로 데이터 요약 확인 가능
- 초보자도 쉽게 사용 가능

2. 경량화
- Wireshark보다 적은 리소스로 빠른 데이터 분석 제공.

3. 자동화된 알림 (미정??)
- 비정상 트래픽 탐지 시 즉시 알림.

4. 웹 기반 접근
- 설치 필요 없이 웹 브라우저로 실시간 접근 가능.

## 시스템 구성
1. 흐름도
Flask 서버 실행 →
subprocess로 tshark 실행하여 실시간 데이터 수집 →
데이터를 JSON으로 변환 →
Flask API로 데이터를 전달 →
Frontend에서 시각화 및 표시.